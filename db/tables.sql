/* DESTROY SCRIPT */
DROP TABLE IF EXISTS VOTE;
DROP TABLE IF EXISTS QUESTION_TAG;
DROP TABLE IF EXISTS RELATED_TAGS;
DROP TABLE IF EXISTS TAG;
DROP TABLE IF EXISTS ANSWER;
DROP TABLE IF EXISTS QUESTION;
DROP TABLE IF EXISTS CONTENT;
DROP TABLE IF EXISTS MEDUSER;

/* USER */
CREATE TABLE MEDUSER (
    ID uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    USERNAME varchar(255) NOT NULL UNIQUE,
    CREATED timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

/* CONTENT */
CREATE TABLE CONTENT (
    ID uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    AUTHOR uuid NOT NULL,
    CREATED timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    LAST_MODIFIED timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    GOOD_CONTENT BOOLEAN NOT NULL DEFAULT FALSE,
    DATA TEXT NOT NULL,
    CHECK (CREATED <= LAST_MODIFIED),
    FOREIGN KEY (AUTHOR) REFERENCES MEDUSER(ID)
);

/* QUESTIONS */
CREATE TABLE QUESTION (
    ID uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    TITLE varchar(255) NOT NULL,
    AUTHOR uuid NOT NULL,
    FOREIGN KEY (AUTHOR) REFERENCES MEDUSER(ID),
    DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

/* ANSWERS */
CREATE TABLE ANSWER (
    ID uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    QUESTION_ID uuid NOT NULL,
    FOREIGN KEY (QUESTION_ID) REFERENCES QUESTION(ID),
    CONTENT_ID uuid NOT NULL,
    FOREIGN KEY (CONTENT_ID) REFERENCES CONTENT(ID)
);

/* TAGS */
CREATE TABLE TAG (
    ID SERIAL PRIMARY KEY,
    NAME varchar(255) NOT NULL UNIQUE,
    DESCRIPTION varchar(255)
);

CREATE TABLE RELATED_TAGS (
    TAG_ID INT NOT NULL,
    RELATED_TAG_ID INT NOT NULL,
    PRIMARY KEY (TAG_ID, RELATED_TAG_ID),
    FOREIGN KEY (TAG_ID) REFERENCES TAG(ID),
    FOREIGN KEY (RELATED_TAG_ID) REFERENCES TAG(ID)
);

CREATE TABLE QUESTION_TAG (
    QUESTION_ID uuid NOT NULL,
    TAG_ID INT NOT NULL,
    PRIMARY KEY (QUESTION_ID, TAG_ID),
    FOREIGN KEY (QUESTION_ID) REFERENCES QUESTION(ID),
    FOREIGN KEY (TAG_ID) REFERENCES TAG(ID)
);

/* VOTES */
CREATE TABLE VOTE (
    ID uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    USER_ID uuid NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES MEDUSER(ID),
    CONTENT_ID uuid NOT NULL,
    FOREIGN KEY (CONTENT_ID) REFERENCES CONTENT(ID),
    UPVOTE BOOLEAN NOT NULL
    /* effective */
);
